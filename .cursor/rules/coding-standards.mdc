---
globs: *.ts,*.tsx
description: TypeScript and React Native coding standards with file structure guidelines
---

# TypeScript & React Native Standards

## File Length and Structure

- Never allow a file to exceed 500 lines
- If a file approaches 400 lines, break it up immediately
- Treat 1000 lines as unacceptable, even temporarily
- Use folders and naming conventions to keep small files logically grouped

## Object-Oriented Design (Koop First)

- Every functionality should be in a dedicated class, struct, or protocol, even if it's small
- Favor composition over inheritance, but always use object-oriented thinking
- Code must be built for reuse, not just to "make it work"

## Single Responsibility Principle

- Every file, class, and function should do one thing only
- If it has multiple responsibilities, split it immediately
- Each view, manager, or utility should be laser-focused on one concern

## Modular Design

- Code should connect like Lego - interchangeable, testable, and isolated
- Ask: "Can I reuse this class in a different project?" If not, refactor it
- Reduce tight coupling between components. Favor dependency injection or protocols

## Manager and Coordinator Patterns

- Use ViewModel, Manager, and Coordinator naming conventions for logic separation:
  - UI logic → ViewModel
  - Business logic → Manager
  - Navigation/state flow → Coordinator
- Never mix views and business logic directly

## Function and Class Size

- Keep functions under 30-40 lines
- If a class is over 200 lines, assess splitting into smaller helper classes

## Naming and Readability

- All class, method, and variable names must be descriptive and intention-revealing
- Avoid vague names like data, info, helper, or temp

## Scalability Mindset

- Always code as if someone else will scale this
- Include extension points (e.g., protocol conformance, dependency injection) from day one

## Avoid God Classes

- Never let one file or class hold everything (e.g., massive ViewController, ViewModel, or Service)
- Split into UI, State, Handlers, Networking, etc.

## Code Style

- Always use semicolons
- Use TypeScript interfaces for props and state
- Prefer functional components with hooks
- Use proper TypeScript types from [src/types/env.d.ts](mdc:src/types/env.d.ts)

## React Native Best Practices

- Use [src/styles/theme.ts](mdc:src/styles/theme.ts) for consistent styling
- Import components from [src/components/](mdc:src/components/) directory
- Use AsyncStorage for persistent data storage
- Handle loading states and error conditions

## API Integration

- Always check if services are configured before making API calls
- Use try-catch blocks for API calls
- Implement proper error handling and user feedback
- Cache API responses when appropriate

## Navigation

- Use [@react-navigation/native](mdc:src/screens/) for screen navigation
- Define proper TypeScript types for navigation params
- Follow the existing navigation structure in [App.tsx](mdc:App.tsx)
